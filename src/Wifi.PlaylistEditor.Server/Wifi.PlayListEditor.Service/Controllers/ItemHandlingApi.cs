/*
 * API description for Playlist project
 *
 * This is a sample Playlist Server based on the OpenAPI 3.0 specification.  You can find out more about OpenAPI at [https://oai.github.io/Documentation](https://oai.github.io/Documentation).      Playlist server should provide following functionalities: - Upload item to server - Delete item from server - Get data from one item - Get list of all items on server - Create playlists - Modify playlists - Get a list of all existing playlists Further sources for information   - [Multipart Requests](https://swagger.io/docs/specification/describing-request-body/multipart-requests)   - [Upload And Download Multiple Files Using Web API](https://github.com/JayKrishnareddy/UploadandDownloadFiles)
 *
 * OpenAPI spec version: 1.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Wifi.PlayListEditor.Service.Models;
using Wifi.PlayListEditor.Service.Attributes;

namespace Wifi.PlayListEditor.Service.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("playlistapi/v1")]
    public class ItemHandlingApiController : ControllerBase
    {
        /// <summary>
        /// Get all available item data from server
        /// </summary>
        /// <remarks>Returns all available item data from server</remarks>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("items")]
        [ValidateModelState]
        public virtual IActionResult ItemsGet()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ItemList));
            string exampleJson = null;
            exampleJson = "{\n  \"items\" : [ {\n    \"duration\" : 205,\n    \"path\" : \"data\\musik\\Bethoven.mp3\",\n    \"thumbnail\" : \"\",\n    \"extension\" : \".mp3\",\n    \"artist\" : \"Gandalf Singer\",\n    \"id\" : \"4979875A-123E-4346-CCAB-CB5CE62DA97C\",\n    \"title\" : \"The bird song\"\n  }, {\n    \"duration\" : 205,\n    \"path\" : \"data\\musik\\Bethoven.mp3\",\n    \"thumbnail\" : \"\",\n    \"extension\" : \".mp3\",\n    \"artist\" : \"Gandalf Singer\",\n    \"id\" : \"4979875A-123E-4346-CCAB-CB5CE62DA97C\",\n    \"title\" : \"The bird song\"\n  } ]\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ItemList>(exampleJson)
            : default(ItemList);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a playlist item from server
        /// </summary>
        /// <remarks>delete a playlist</remarks>
        /// <param name="itemId">ID of playlist item to delete</param>
        /// <response code="201">successful operation</response>
        /// <response code="400">Invalid item value</response>
        /// <response code="404">Playlist item not found</response>
        /// <response code="423">Item is locked due usage in one or more playlists</response>
        [HttpDelete]
        [Route("items/{itemId}")]
        [ValidateModelState]
        public virtual IActionResult ItemsItemIdDelete([FromRoute][Required] string itemId)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 423 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(423);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns item by ID
        /// </summary>
        /// <remarks>Returns a single item data</remarks>
        /// <param name="itemId">ID of item to return</param>
        /// <response code="201">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Playlist not found</response>
        [HttpGet]
        [Route("items/{itemId}")]
        [ValidateModelState]
        public virtual IActionResult ItemsItemIdGet([FromRoute][Required] string itemId)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PlaylistItem));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"duration\" : 205,\n  \"path\" : \"data\\musik\\Bethoven.mp3\",\n  \"thumbnail\" : \"\",\n  \"extension\" : \".mp3\",\n  \"artist\" : \"Gandalf Singer\",\n  \"id\" : \"4979875A-123E-4346-CCAB-CB5CE62DA97C\",\n  \"title\" : \"The bird song\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PlaylistItem>(exampleJson)
            : default(PlaylistItem);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

    }
}
