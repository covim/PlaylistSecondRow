/*
 * API description for Playlist project
 *
 * This is a sample Playlist Server based on the OpenAPI 3.0 specification.  You can find out more about OpenAPI at [https://oai.github.io/Documentation](https://oai.github.io/Documentation).      Playlist server should provide following functionalities: - Upload item to server - Delete item from server - Get data from one item - Get list of all items on server - Create playlists - Modify playlists - Get a list of all existing playlists Further sources for information   - [Multipart Requests](https://swagger.io/docs/specification/describing-request-body/multipart-requests)   - [Upload And Download Multiple Files Using Web API](https://github.com/JayKrishnareddy/UploadandDownloadFiles)
 *
 * OpenAPI spec version: 1.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Wifi.PlayListEditor.Service.Models;
using Wifi.PlayListEditor.Service.Attributes;
using Wifi.PlayListEditor.Service.Domain;
using Wifi.PlayListEditor.Service.Mappings;
using Wifi.PlaylistEditor.Types;
using Wifi.PlaylistEditor.Factories;
using Wifi.PlayList.Editor.DbRepositories;
using Microsoft.Extensions.Options;
using Wifi.PlayList.Editor.DbRepositories.MongoDbEntities;
using TagLib.Ape;

namespace Wifi.PlayListEditor.Service.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("playlistapi/v1")]  //v1 ist die nur einer Versionierung der Schnittstelle
    public class PlaylistsApiController : ControllerBase
    {
        private readonly IPlaylistService _playlistService;
        private readonly IPlaylistFactory _playlistFactory;

        public PlaylistsApiController(IPlaylistService playlistService, IPlaylistFactory playlistFactory)
        {
            _playlistService = playlistService;
            _playlistFactory = playlistFactory;
        }

        [HttpGet]
        [Route("playlists")]
        [ValidateModelState]
        public async Task<IActionResult> PlaylistsGet()
        {
            var domainObjects = await _playlistService.GetAllPlaylists();
            if (domainObjects == null)
            {
                return StatusCode(201, new PlaylistList());
            }

            var entity = domainObjects.ToRestEntity();

            return StatusCode(200, entity);
        }

        [HttpGet]
        [Route("playlists/{playlistId}")]
        [ValidateModelState]
        public async Task<IActionResult> PlaylistsPlaylistIdGet([FromRoute][Required] string playlistId)
        {
            if (string.IsNullOrEmpty(playlistId))
            {
                return StatusCode(400);
            }

            var domainObject = await _playlistService.GetPlaylistById(playlistId);
            if (domainObject == null)
            {
                return StatusCode(404);
            }

            var entity = domainObject.ToRestEntity();

            return StatusCode(200, entity);
        }


        [HttpDelete]
        [Route("playlists/{playlistId}")]
        [ValidateModelState]
        public async Task<IActionResult> PlaylistsPlaylistIdDelete([FromRoute][Required] string playlistId)
        {
            var playlist = await _playlistService.GetPlaylistById(playlistId);
            if (playlist == null)
            {
                return StatusCode(404);
            }

            await _playlistService.DeletePlaylist(playlistId);
            return StatusCode(204);
        }

       
        [HttpPost]
        [Route("playlists")]
        [ValidateModelState]
        public async Task<IActionResult> PlaylistsPost([FromBody] PlaylistPost entity)
        {
            if (entity == null)
            {
                return StatusCode(405);
            }

            var domainObject = entity.ToDomain(_playlistFactory);
            foreach (var item in entity.Items)
            {
                var playlistItem = await _playlistService.GetItemById(item.Id);
                if (playlistItem != null)
                {
                    domainObject.Add(playlistItem);
                }
                else
                {
                    return StatusCode(404, $"Item with id = {item.Id} not found.");
                }
            }

            await _playlistService.AddNewPlaylist(domainObject);

            var playlistEnity = domainObject.ToRestEntity();

            return StatusCode(201, playlistEnity);
        }



        /// <summary>
        /// Updates playlist items by ID
        /// </summary>
        /// <remarks>Updates playlist items by ID. The existing items within the playlist will be replaced by received item list.</remarks>
        /// <param name="body">Optional description in *Markdown*</param>
        /// <param name="playlistId">ID of playlist to update</param>
        /// <response code="201">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Playlist not found</response>
        [HttpPut]
        [Route("playlists/{playlistId}")]
        [ValidateModelState]
        public async Task<IActionResult> PlaylistsPlaylistIdPut([FromBody] PlaylistUpdate body, [FromRoute][Required] string playlistId)
        {
            var existingPlaylist = await _playlistService.GetPlaylistById(playlistId);
            if (existingPlaylist == null || body == null)
            {
                return StatusCode(404);
            }

            var updatedPlaylist = body.ToDomain(_playlistFactory);
            foreach (var item in body.Items)
            {
                var playlistItem = await _playlistService.GetItemById(item.Id);
                if (playlistItem != null)
                {
                    updatedPlaylist.Add(playlistItem);
                }
                else
                {
                    return StatusCode(404, $"Item with id = {item.Id} not found.");
                }
            }

            await _playlistService.UpdatePlaylist(existingPlaylist, updatedPlaylist);
            existingPlaylist = await _playlistService.GetPlaylistById(playlistId);

            return StatusCode(201, existingPlaylist.ToRestEntity());
        }


    }
}
